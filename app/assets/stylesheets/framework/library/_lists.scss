
// -- Lists -------------------------------------------


@function is-list( $variable ) {
    @return type-of( $variable ) == "list";
}


@function empty( $list ) {
    @if not is-list( $list ) {
        @error throw-exception( 'invalid-argument' );
    }
    @return length( $list ) == 0;
}


@function first( $list ) {
    @if not is-list( $list ) {
        @error throw-exception( 'invalid-argument' );
    }
    @return nth( $list, 1 );
}


@function last( $list ) {
    @if not is-list( $list ) {
        @error throw-exception( 'invalid-argument' );
    }
    @return nth( $list, length( $list ) );
}


@function list-sort( $list, $order ) {
    $result: ();

    @each $value in $order {
        @if index( $list, $value ) {
            $result: if( empty( $result ), $value, append( $result, $value ) );
        }
    }

    @return $result;
}

// ------------------------------------
// Push a value to the front of a list.
// ------------------------------------

@function prepend( $list, $value ) {
    @return join( $value, $list );
}

// ----------------------------------
// Insert a value at the given index.
// ----------------------------------

@function insert-nth( $list, $index, $value ) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
    }

    @else if $index < 1 {
        @warn "List index 0 must be a non-zero integer for `insert-nth`";
    }

    @else if $index > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
    }

    @else {
        $result: ();

        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }

            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

// ----------------------------------------------
// Replace all values in a list with a new value.
// ----------------------------------------------

@function replace( $list, $old-value, $new-value, $recursive: false ) {
    $result: ();

    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
            $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
        }

        @else {
            @if nth($list, $i) == $old-value {
                $result: append($result, $new-value);
            }

            @else {
                $result: append($result, nth($list, $i));
            }
        }
    }

    @return $result;
}

// -------------------------------------
// Replace value at given index in list.
// -------------------------------------

@function replace-nth($list, $index, $value) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
    }

    @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `replace-nth`.";
    }

    @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
    }

    @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);

        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }

            @else {
                $result: append($result, nth($list, $i));
            }
        }
    }

    @return $result;
}

// ---------------------------------
// Remove a given value from a list.
// ---------------------------------

@function remove( $list, $value, $recursive: false ) {
    $result: ();

    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
            $result: append($result, remove(nth($list, $i), $value, $recursive));
        }

        @else if nth($list, $i) != $value {
            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

// ------------------------------------------
// Remove a value from a list at given index.
// ------------------------------------------

@function remove-nth( $list, $index ) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
    }

    @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `remove-nth`.";
    }

    @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
    }

    @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);

        @for $i from 1 through length($list) {
            @if $i != $index {
                $result: append($result, nth($list, $i));
            }
        }
    }

    @return $result;
}

// ------------------------------
// Slice a list at given indexes.
// ------------------------------

@function slice( $list, $start: 1, $end: length( $list ) ) {
    $result: null;

    @if type-of($start) != number or type-of($end) != number {
        @warn "Either $start or $end are not a number for `slice`.";
    }

    @else if $start > $end {
        @warn "The start index has to be lesser than or equals to the end index for `slice`.";
    }

    @else if $start < 1 or $end < 1 {
        @warn "List indexes must be non-zero integers for `slice`.";
    }

    @else if $start > length($list) {
        @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
    }

    @else if $end > length($list) {
        @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
    }

    @else {
        $result: ();

        @for $i from $start through $end {
            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

// ---------------
// Reverse a list.
// ---------------

@function reverse( $list, $recursive: false ) {
    $result: ();

    @for $i from length($list)*-1 through -1 {
        @if type-of(nth($list, abs($i))) == list and $recursive {
            $result: append($result, reverse(nth($list, abs($i)), $recursive));
        }

        @else {
            $result: append($result, nth($list, abs($i)));
        }
    }

    @return $result;
}

// ---------------------------
// Convert a list to a string.
// ---------------------------

@function implode( $list, $glue: '', $is-nested: false ) {
    $result: null;

    @for $i from 1 through length($list) {
        $e: nth($list, $i);

        @if type-of($e) == list {
            $result: $result#{to-string($e, $glue, true)};
        }

        @else {
            $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
        }
    }

    @return $result;
}

// --------------------------------------------------
// Rotate a list left (negative) or right (positive).
// --------------------------------------------------

@function rotate( $list, $value: 1 ) {
    $result: ();

    @for $i from 0 to length($list) {
        $result: append($result, nth($list, ($i - $value) % length($list) + 1));
    }

    @return $result;
}

// ------------------------
// Remove duplicate values.
// ------------------------

@function unique( $list, $recursive: false ) {
    $result: ();

    @each $item in $list {
        @if not index( $result, $item ) {
            @if length( $item ) > 1 and $recursive {
                $result: append($result, unique( $item, $recursive ) );
            }
            @else {
                $result: append( $result, $item );
            }
        }
    }

    @return $result;
}

// ----------------------------------
// Check wether value exists in list.
// ----------------------------------

@function contain( $list, $value ) {
    @return not not index($list, $value);
}